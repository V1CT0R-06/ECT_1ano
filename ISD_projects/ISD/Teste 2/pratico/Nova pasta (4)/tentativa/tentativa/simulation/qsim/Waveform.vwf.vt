// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2022 10:44:16"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Mux8_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Mux8_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg GN;
reg [2:0] S;
reg [7:0] X;
// wires                                               
wire Out;

// assign statements (if any)                          
Mux8_1 i1 (
// port map - connection between master ports and signals/registers   
	.GN(GN),
	.Out(Out),
	.S(S),
	.X(X)
);
initial 
begin 
#1000000 $finish;
end 

// GN
initial
begin
	GN = 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
	S[2] = #400000 1'b1;
	S[2] = #400000 1'b0;
end 
// S[ 1 ]
initial
begin
	repeat(2)
	begin
		S[1] = 1'b0;
		S[1] = #200000 1'b1;
		# 200000;
	end
	S[1] = 1'b0;
end 
// S[ 0 ]
always
begin
	S[0] = 1'b0;
	S[0] = #100000 1'b1;
	#100000;
end 
// X[ 7 ]
initial
begin
	X[7] = 1'b0;
end 
// X[ 6 ]
initial
begin
	X[6] = 1'b0;
end 
// X[ 5 ]
initial
begin
	X[5] = 1'b0;
	X[5] = #800000 1'b1;
end 
// X[ 4 ]
initial
begin
	X[4] = 1'b0;
	X[4] = #400000 1'b1;
	X[4] = #400000 1'b0;
end 
// X[ 3 ]
initial
begin
	repeat(2)
	begin
		X[3] = 1'b0;
		X[3] = #200000 1'b1;
		# 200000;
	end
	X[3] = 1'b0;
end 
// X[ 2 ]
always
begin
	X[2] = 1'b0;
	X[2] = #100000 1'b1;
	#100000;
end 
// X[ 1 ]
always
begin
	X[1] = 1'b0;
	X[1] = #50000 1'b1;
	#50000;
end 
// X[ 0 ]
always
begin
	X[0] = 1'b0;
	X[0] = #25000 1'b1;
	#25000;
end 
endmodule

